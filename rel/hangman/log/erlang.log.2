
=====
===== LOGGING STARTED Tue Mar 15 11:50:45 PDT 2016
=====
 :intrigued_wall_e
**      Data  == {#Player<[name: "julio", type: :robot, round_no: 1, game_pid: #PID<0.267.0>,
  event_pid: #PID<0.3605.1>,
  round_data: [no: 1, guess: "e", guess_result: :correct_letter,
   round_code: :game_keep_guessing,
   round_status: "--E-----; score=1; status=KEEP_GUESSING",
   pattern: "--E-----"]]>, #PID<0.3624.1>}
** Reason for termination = 
** {{%HangmanError{message: "counter not found for key: {\"julio\", 1, 2}"},
  [{Pass.Cache, :get, 2, [file: 'lib/hangman/pass_cache.ex', line: 168]},
   {Reduction.Engine.Worker, :do_reduce_and_store, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 103]},
   {Reduction.Engine.Worker, :handle_call, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 84]},
   {:gen_server, :try_handle_call, 4, [file: 'gen_server.erl', line: 629]},
   {:gen_server, :handle_msg, 5, [file: 'gen_server.erl', line: 661]},
   {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 240]}]},
 {GenServer, :call,
  [{:via, :gproc, {:n, :l, {:reduction_engine_worker, 9}}},
   {:reduce_and_store, {"julio", 1, 2}, ~r/^[^e][^e]e[^e][^e][^e][^e][^e]$/,
    #MapSet<["e"]>}, 5000]}}


=CRASH REPORT==== 15-Mar-2016::11:50:44 ===
  crasher:
    initial call: Elixir.Player.FSM:init/1
    pid: <0.3660.1>
    registered_name: []
    exception exit: {{#{'__exception__' => true,
                        '__struct__' => 'Elixir.HangmanError',
                        message => <<"counter not found for key: {\"julio\", 1, 2}">>},
                      [{'Elixir.Pass.Cache',get,2,
                           [{file,"lib/hangman/pass_cache.ex"},{line,168}]},
                       {'Elixir.Reduction.Engine.Worker',do_reduce_and_store,
                           3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,103}]},
                       {'Elixir.Reduction.Engine.Worker',handle_call,3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,84}]},
                       {gen_server,try_handle_call,4,
                           [{file,"gen_server.erl"},{line,629}]},
                       {gen_server,handle_msg,5,
                           [{file,"gen_server.erl"},{line,661}]},
                       {proc_lib,init_p_do_apply,3,
                           [{file,"proc_lib.erl"},{line,240}]}]},
                     {'Elixir.GenServer',call,
                         [{via,gproc,{n,l,{reduction_engine_worker,9}}},
                          {reduce_and_store,
                              {<<"julio">>,1,2},
                              #{'__struct__' => 'Elixir.Regex',
                                opts => <<>>,
                                re_pattern => {re_pattern,0,0,0,
                                    <<69,82,67,80,81,0,0,0,16,0,0,0,1,0,0,0,
                                      255,255,255,255,255,255,255,255,0,0,0,0,
                                      0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,
                                      0,0,0,0,0,0,0,0,0,125,0,21,25,31,101,31,
                                      101,29,101,31,101,31,101,29,105,31,101,
                                      31,101,27,114,0,21,0>>},
                                source => <<"^[^e][^e]e[^e][^e]i[^e][^e]$">>},
                              #{'__struct__' => 'Elixir.MapSet',
                                map => #{<<"e">> => true}}},
                          5000]}}
      in function  gen_fsm:terminate/7 (gen_fsm.erl, line 626)
    ancestors: [hangman_player_supervisor,<0.136.0>,<0.106.0>,<0.102.0>,
                  <0.101.0>]
    messages: []
    links: [<0.267.0>,<0.3661.1>,<0.137.0>]
    dictionary: []
    trap_exit: false
    status: running
    heap_size: 4185
    stack_size: 27
    reductions: 5800
  neighbours:
    neighbour: [{pid,<0.3661.1>},
                  {registered_name,[]},
                  {initial_call,
                      {'Elixir.Player.Async.Echo',init,['Argument__1']}},
                  {current_function,{gen_fsm,loop,7}},
                  {ancestors,
                      [<0.3660.1>,hangman_player_supervisor,<0.136.0>,
                       <0.106.0>,<0.102.0>,<0.101.0>]},
                  {messages,[]},
                  {links,[<0.3660.1>]},
                  {dictionary,[]},
                  {trap_exit,false},
                  {status,waiting},
                  {heap_size,233},
                  {stack_size,10},
                  {reductions,17}]

11:50:43.008 [error] ** State machine #PID<0.3640.1> terminating 
** Last message in was {:"$gen_sync_event", {#PID<0.3568.1>, #Reference<0.0.1.53572>},
 :game_keep_guessing}
** When State == :intrigued_wall_e
**      Data  == {#Player<[name: "julio", type: :robot, round_no: 1, game_pid: #PID<0.267.0>,
  event_pid: #PID<0.3615.1>,
  round_data: [no: 1, guess: "e", guess_result: :correct_letter,
   round_code: :game_keep_guessing,
   round_status: "--E-----; score=1; status=KEEP_GUESSING",
   pattern: "--E-----"]]>, #PID<0.3642.1>}
** Reason for termination = 
** {{%HangmanError{message: "counter not found for key: {\"julio\", 1, 2}"},
  [{Pass.Cache, :get, 2, [file: 'lib/hangman/pass_cache.ex', line: 168]},
   {Reduction.Engine.Worker, :do_reduce_and_store, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 103]},
   {Reduction.Engine.Worker, :handle_call, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 84]},
   {:gen_server, :try_handle_call, 4, [file: 'gen_server.erl', line: 629]},
   {:gen_server, :handle_msg, 5, [file: 'gen_server.erl', line: 661]},
   {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 240]}]},
 {GenServer, :call,
  [{:via, :gproc, {:n, :l, {:reduction_engine_worker, 9}}},
   {:reduce_and_store, {"julio", 1, 2}, ~r/^[^e][^e]e[^e][^e][^e][^e][^e]$/,
    #MapSet<["e"]>}, 5000]}}


11:50:43.010 [error] ** State machine #PID<0.3586.1> terminating 
** Last message in was {:"$gen_sync_event", {#PID<0.3556.1>, #Reference<0.0.1.53620>},
 :game_keep_guessing}
** When State == :intrigued_wall_e
**      Data  == {#Player<[name: "julio", type: :robot, round_no: 2, game_pid: #PID<0.267.0>,
  event_pid: #PID<0.3584.1>,
  round_data: [no: 2, guess: "i", guess_result: :correct_letter,
   round_code: :game_keep_guessing,
   round_status: "--E--I--; score=2; status=KEEP_GUESSING",
   pattern: "--E--I--"]]>, #PID<0.3588.1>}
** Reason for termination = 
** {{%HangmanError{message: "counter not found for key: {\"julio\", 1, 2}"},
  [{Pass.Cache, :get, 2, [file: 'lib/hangman/pass_cache.ex', line: 168]},
   {Reduction.Engine.Worker, :do_reduce_and_store, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 103]},
   {Reduction.Engine.Worker, :handle_call, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 84]},
   {:gen_server, :try_handle_call, 4, [file: 'gen_server.erl', line: 629]},
   {:gen_server, :handle_msg, 5, [file: 'gen_server.erl', line: 661]},
   {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 240]}]},
 {GenServer, :call,
  [{:via, :gproc, {:n, :l, {:reduction_engine_worker, 9}}},
   {:reduce_and_store, {"julio", 1, 3}, ~r/^[^ei][^ei]e[^ei][^ei]i[^ei][^ei]$/,
    #MapSet<["e", "i"]>}, 5000]}}


=CRASH REPORT==== 15-Mar-2016::11:50:44 ===
  crasher:
    initial call: Elixir.Player.FSM:init/1
    pid: <0.3658.1>
    registered_name: []
    exception exit: {{#{'__exception__' => true,
                        '__struct__' => 'Elixir.HangmanError',
                        message => <<"counter not found for key: {\"julio\", 1, 2}">>},
                      [{'Elixir.Pass.Cache',get,2,
                           [{file,"lib/hangman/pass_cache.ex"},{line,168}]},
                       {'Elixir.Reduction.Engine.Worker',do_reduce_and_store,
                           3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,103}]},
                       {'Elixir.Reduction.Engine.Worker',handle_call,3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,84}]},
                       {gen_server,try_handle_call,4,
                           [{file,"gen_server.erl"},{line,629}]},
                       {gen_server,handle_msg,5,
                           [{file,"gen_server.erl"},{line,661}]},
                       {proc_lib,init_p_do_apply,3,
                           [{file,"proc_lib.erl"},{line,240}]}]},
                     {'Elixir.GenServer',call,
                         [{via,gproc,{n,l,{reduction_engine_worker,9}}},
                          {reduce_and_store,
                              {<<"julio">>,1,2},
                              #{'__struct__' => 'Elixir.Regex',
                                opts => <<>>,
                                re_pattern => {re_pattern,0,0,0,
                                    <<69,82,67,80,81,0,0,0,16,0,0,0,1,0,0,0,
                                      255,255,255,255,255,255,255,255,0,0,0,0,
                                      0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,
                                      0,0,0,0,0,0,0,0,0,125,0,21,25,31,101,31,
                                      101,29,101,31,101,31,101,29,105,31,101,
                                      31,101,27,114,0,21,0>>},
                                source => <<"^[^e][^e]e[^e][^e]i[^e][^e]$">>},
                              #{'__struct__' => 'Elixir.MapSet',
                                map => #{<<"e">> => true}}},
                          5000]}}
      in function  gen_fsm:terminate/7 (gen_fsm.erl, line 626)
    ancestors: [hangman_player_supervisor,<0.136.0>,<0.106.0>,<0.102.0>,
                  <0.101.0>]
    messages: []
    links: [<0.267.0>,<0.3659.1>,<0.137.0>]
    dictionary: []
    trap_exit: false
    status: running
    heap_size: 4185
    stack_size: 27
    reductions: 5800
  neighbours:
    neighbour: [{pid,<0.3659.1>},
                  {registered_name,[]},
                  {initial_call,
                      {'Elixir.Player.Async.Echo',init,['Argument__1']}},
                  {current_function,{gen_fsm,loop,7}},
                  {ancestors,
                      [<0.3658.1>,hangman_player_supervisor,<0.136.0>,
                       <0.106.0>,<0.102.0>,<0.101.0>]},
                  {messages,[]},
                  {links,[<0.3658.1>]},
                  {dictionary,[]},
                  {trap_exit,false},
                  {status,waiting},
                  {heap_size,233},
                  {stack_size,10},
                  {reductions,17}]

11:50:43.012 [error] ** State machine #PID<0.3634.1> terminating 
** Last message in was {:"$gen_sync_event", {#PID<0.3566.1>, #Reference<0.0.1.53576>},
 :game_keep_guessing}
** When State == :intrigued_wall_e
**      Data  == {#Player<[name: "julio", type: :robot, round_no: 1, game_pid: #PID<0.267.0>,
  event_pid: #PID<0.3611.1>,
  round_data: [no: 1, guess: "e", guess_result: :correct_letter,
   round_code: :game_keep_guessing,
   round_status: "--E-----; score=1; status=KEEP_GUESSING",
   pattern: "--E-----"]]>, #PID<0.3636.1>}
** Reason for termination = 
** {{%HangmanError{message: "counter not found for key: {\"julio\", 1, 2}"},
  [{Pass.Cache, :get, 2, [file: 'lib/hangman/pass_cache.ex', line: 168]},
   {Reduction.Engine.Worker, :do_reduce_and_store, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 103]},
   {Reduction.Engine.Worker, :handle_call, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 84]},
   {:gen_server, :try_handle_call, 4, [file: 'gen_server.erl', line: 629]},
   {:gen_server, :handle_msg, 5, [file: 'gen_server.erl', line: 661]},
   {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 240]}]},
 {GenServer, :call,
  [{:via, :gproc, {:n, :l, {:reduction_engine_worker, 9}}},
   {:reduce_and_store, {"julio", 1, 2}, ~r/^[^e][^e]e[^e][^e][^e][^e][^e]$/,
    #MapSet<["e"]>}, 5000]}}


11:50:43.014 [error] ** State machine #PID<0.3630.1> terminating 
** Last message in was {:"$gen_sync_event", {#PID<0.3565.1>, #Reference<0.0.1.53567>},
 :game_keep_guessing}
** When State == :intrigued_wall_e
**      Data  == {#Player<[name: "julio", type: :robot, round_no: 1, game_pid: #PID<0.267.0>,
  event_pid: #PID<0.3609.1>,
  round_data: [no: 1, guess: "e", guess_result: :correct_letter,
   round_code: :game_keep_guessing,
   round_status: "--E-----; score=1; status=KEEP_GUESSING",
   pattern: "--E-----"]]>, #PID<0.3632.1>}
** Reason for termination = 
** {{%HangmanError{message: "counter not found for key: {\"julio\", 1, 2}"},
  [{Pass.Cache, :get, 2, [file: 'lib/hangman/pass_cache.ex', line: 168]},
   {Reduction.Engine.Worker, :do_reduce_and_store, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 103]},
   {Reduction.Engine.Worker, :handle_call, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 84]},
   {:gen_server, :try_handle_call, 4, [file: 'gen_server.erl', line: 629]},
   {:gen_server, :handle_msg, 5, [file: 'gen_server.erl', line: 661]},
   {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 240]}]},
 {GenServer, :call,
  [{:via, :gproc, {:n, :l, {:reduction_engine_worker, 9}}},
   {:reduce_and_store, {"julio", 1, 2}, ~r/^[^e][^e]e[^e][^e][^e][^e][^e]$/,
    #MapSet<["e"]>}, 5000]}}


=CRASH REPORT==== 15-Mar-2016::11:50:44 ===
  crasher:
    initial call: Elixir.Player.FSM:init/1
    pid: <0.3650.1>
    registered_name: []
    exception exit: {{#{'__exception__' => true,
                        '__struct__' => 'Elixir.HangmanError',
                        message => <<"counter not found for key: {\"julio\", 1, 2}">>},
                      [{'Elixir.Pass.Cache',get,2,
                           [{file,"lib/hangman/pass_cache.ex"},{line,168}]},
                       {'Elixir.Reduction.Engine.Worker',do_reduce_and_store,
                           3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,103}]},
                       {'Elixir.Reduction.Engine.Worker',handle_call,3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,84}]},
                       {gen_server,try_handle_call,4,
                           [{file,"gen_server.erl"},{line,629}]},
                       {gen_server,handle_msg,5,
                           [{file,"gen_server.erl"},{line,661}]},
                       {proc_lib,init_p_do_apply,3,
                           [{file,"proc_lib.erl"},{line,240}]}]},
                     {'Elixir.GenServer',call,
                         [{via,gproc,{n,l,{reduction_engine_worker,9}}},
                          {reduce_and_store,
                              {<<"julio">>,1,2},
                              #{'__struct__' => 'Elixir.Regex',
                                opts => <<>>,
                                re_pattern => {re_pattern,0,0,0,
                                    <<69,82,67,80,81,0,0,0,16,0,0,0,1,0,0,0,
                                      255,255,255,255,255,255,255,255,0,0,0,0,
                                      0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,
                                      0,0,0,0,0,0,0,0,0,125,0,21,25,31,101,31,
                                      101,29,101,31,101,31,101,29,105,31,101,
                                      31,101,27,114,0,21,0>>},
                                source => <<"^[^e][^e]e[^e][^e]i[^e][^e]$">>},
                              #{'__struct__' => 'Elixir.MapSet',
                                map => #{<<"e">> => true}}},
                          5000]}}
      in function  gen_fsm:terminate/7 (gen_fsm.erl, line 626)
    ancestors: [hangman_player_supervisor,<0.136.0>,<0.106.0>,<0.102.0>,
                  <0.101.0>]
    messages: []
    links: [<0.267.0>,<0.3651.1>,<0.137.0>]
    dictionary: []
    trap_exit: false
    status: running
    heap_size: 6772
    stack_size: 27
    reductions: 5768
  neighbours:
    neighbour: [{pid,<0.3651.1>},
                  {registered_name,[]},
                  {initial_call,
                      {'Elixir.Player.Async.Echo',init,['Argument__1']}},
                  {current_function,{gen_fsm,loop,7}},
                  {ancestors,
                      [<0.3650.1>,hangman_player_supervisor,<0.136.0>,
                       <0.106.0>,<0.102.0>,<0.101.0>]},
                  {messages,[]},
                  {links,[<0.3650.1>]},
                  {dictionary,[]},
                  {trap_exit,false},
                  {status,waiting},
                  {heap_size,233},
                  {stack_size,10},
                  {reductions,17}]

11:50:43.015 [error] ** State machine #PID<0.3644.1> terminating 
** Last message in was {:"$gen_sync_event", {#PID<0.3569.1>, #Reference<0.0.1.53582>},
 :game_keep_guessing}
** When State == :intrigued_wall_e
**      Data  == {#Player<[name: "julio", type: :robot, round_no: 1, game_pid: #PID<0.267.0>,
  event_pid: #PID<0.3619.1>,
  round_data: [no: 1, guess: "e", guess_result: :correct_letter,
   round_code: :game_keep_guessing,
   round_status: "--E-----; score=1; status=KEEP_GUESSING",
   pattern: "--E-----"]]>, #PID<0.3646.1>}
** Reason for termination = 
** {{%HangmanError{message: "counter not found for key: {\"julio\", 1, 2}"},
  [{Pass.Cache, :get, 2, [file: 'lib/hangman/pass_cache.ex', line: 168]},
   {Reduction.Engine.Worker, :do_reduce_and_store, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 103]},
   {Reduction.Engine.Worker, :handle_call, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 84]},
   {:gen_server, :try_handle_call, 4, [file: 'gen_server.erl', line: 629]},
   {:gen_server, :handle_msg, 5, [file: 'gen_server.erl', line: 661]},
   {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 240]}]},
 {GenServer, :call,
  [{:via, :gproc, {:n, :l, {:reduction_engine_worker, 9}}},
   {:reduce_and_store, {"julio", 1, 2}, ~r/^[^e][^e]e[^e][^e][^e][^e][^e]$/,
    #MapSet<["e"]>}, 5000]}}


11:50:43.016 [error] ** State machine #PID<0.3654.1> terminating 
** Last message in was {:"$gen_sync_event", {#PID<0.3573.1>, #Reference<0.0.1.53633>},
 :game_keep_guessing}
** When State == :intrigued_wall_e
**      Data  == {#Player<[name: "julio", type: :robot, round_no: 1, game_pid: #PID<0.267.0>,
  event_pid: #PID<0.3627.1>,
  round_data: [no: 1, guess: "e", guess_result: :correct_letter,
   round_code: :game_keep_guessing,
   round_status: "--E--I--; score=2; status=KEEP_GUESSING",
   pattern: "--E--I--"]]>, #PID<0.3655.1>}
** Reason for termination = 
** {{%HangmanError{message: "counter not found for key: {\"julio\", 1, 2}"},
  [{Pass.Cache, :get, 2, [file: 'lib/hangman/pass_cache.ex', line: 168]},
   {Reduction.Engine.Worker, :do_reduce_and_store, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 103]},
   {Reduction.Engine.Worker, :handle_call, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 84]},
   {:gen_server, :try_handle_call, 4, [file: 'gen_server.erl', line: 629]},
   {:gen_server, :handle_msg, 5, [file: 'gen_server.erl', line: 661]},
   {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 240]}]},
 {GenServer, :call,
  [{:via, :gproc, {:n, :l, {:reduction_engine_worker, 9}}},
   {:reduce_and_store, {"julio", 1, 2}, ~r/^[^e][^e]e[^e][^e]i[^e][^e]$/,
    #MapSet<["e"]>}, 5000]}}


11:50:43.018 [error] ** State machine #PID<0.3652.1> terminating 
** Last message in was {:"$gen_sync_event", {#PID<0.3572.1>, #Reference<0.0.1.53631>},
 :game_keep_guessing}
** When State == :intrigued_wall_e
**      Data  == {#Player<[name: "julio", type: :robot, round_no: 1, game_pid: #PID<0.267.0>,
  event_pid: #PID<0.3625.1>,
  round_data: [no: 1, guess: "e", guess_result: :correct_letter,
   round_code: :game_keep_guessing,
   round_status: "--E--I--; score=2; status=KEEP_GUESSING",
   pattern: "--E--I--"]]>, #PID<0.3653.1>}
** Reason for termination = 
** {{%HangmanError{message: "counter not found for key: {\"julio\", 1, 2}"},
  [{Pass.Cache, :get, 2, [file: 'lib/hangman/pass_cache.ex', line: 168]},
   {Reduction.Engine.Worker, :do_reduce_and_store, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 103]},
   {Reduction.Engine.Worker, :handle_call, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 84]},
   {:gen_server, :try_handle_call, 4, [file: 'gen_server.erl', line: 629]},
   {:gen_server, :handle_msg, 5, [file: 'gen_server.erl', line: 661]},
   {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 240]}]},
 {GenServer, :call,
  [{:via, :gproc, {:n, :l, {:reduction_engine_worker, 9}}},
   {:reduce_and_store, {"julio", 1, 2}, ~r/^[^e][^e]e[^e][^e]i[^e][^e]$/,
    #MapSet<["e"]>}, 5000]}}


=CRASH REPORT==== 15-Mar-2016::11:50:44 ===
  crasher:
    initial call: Elixir.Player.FSM:init/1
    pid: <0.3608.1>
    registered_name: []
    exception exit: {{#{'__exception__' => true,
                        '__struct__' => 'Elixir.HangmanError',
                        message => <<"counter not found for key: {\"julio\", 1, 2}">>},
                      [{'Elixir.Pass.Cache',get,2,
                           [{file,"lib/hangman/pass_cache.ex"},{line,168}]},
                       {'Elixir.Reduction.Engine.Worker',do_reduce_and_store,
                           3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,103}]},
                       {'Elixir.Reduction.Engine.Worker',handle_call,3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,84}]},
                       {gen_server,try_handle_call,4,
                           [{file,"gen_server.erl"},{line,629}]},
                       {gen_server,handle_msg,5,
                           [{file,"gen_server.erl"},{line,661}]},
                       {proc_lib,init_p_do_apply,3,
                           [{file,"proc_lib.erl"},{line,240}]}]},
                     {'Elixir.GenServer',call,
                         [{via,gproc,{n,l,{reduction_engine_worker,9}}},
                          {reduce_and_store,
                              {<<"julio">>,1,2},
                              #{'__struct__' => 'Elixir.Regex',
                                opts => <<>>,
                                re_pattern => {re_pattern,0,0,0,
                                    <<69,82,67,80,81,0,0,0,16,0,0,0,1,0,0,0,
                                      255,255,255,255,255,255,255,255,0,0,0,0,
                                      0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,
                                      0,0,0,0,0,0,0,0,0,125,0,21,25,31,101,31,
                                      101,29,101,31,101,31,101,31,101,31,101,
                                      31,101,27,114,0,21,0>>},
                                source => <<"^[^e][^e]e[^e][^e][^e][^e][^e]$">>},
                              #{'__struct__' => 'Elixir.MapSet',
                                map => #{<<"e">> => true}}},
                          5000]}}
      in function  gen_fsm:terminate/7 (gen_fsm.erl, line 626)
    ancestors: [hangman_player_supervisor,<0.136.0>,<0.106.0>,<0.102.0>,
                  <0.101.0>]
    messages: []
    links: [<0.267.0>,<0.3610.1>,<0.137.0>]
    dictionary: []
    trap_exit: false
    status: running
    heap_size: 6772
    stack_size: 27
    reductions: 5744
  neighbours:
    neighbour: [{pid,<0.3610.1>},
                  {registered_name,[]},
                  {initial_call,
                      {'Elixir.Player.Async.Echo',init,['Argument__1']}},
                  {current_function,{gen_fsm,loop,7}},
                  {ancestors,
                      [<0.3608.1>,hangman_player_supervisor,<0.136.0>,
                       <0.106.0>,<0.102.0>,<0.101.0>]},
                  {messages,[]},
                  {links,[<0.3608.1>]},
                  {dictionary,[]},
                  {trap_exit,false},
                  {status,waiting},
                  {heap_size,233},
                  {stack_size,10},
                  {reductions,17}]

11:50:43.019 [error] ** State machine #PID<0.3656.1> terminating 
** Last message in was {:"$gen_sync_event", {#PID<0.3574.1>, #Reference<0.0.1.53654>},
 :game_keep_guessing}
** When State == :intrigued_wall_e
**      Data  == {#Player<[name: "julio", type: :robot, round_no: 1, game_pid: #PID<0.267.0>,
  event_pid: #PID<0.3629.1>,
  round_data: [no: 1, guess: "e", guess_result: :correct_letter,
   round_code: :game_keep_guessing,
   round_status: "--E--I--; score=2; status=KEEP_GUESSING",
   pattern: "--E--I--"]]>, #PID<0.3657.1>}
** Reason for termination = 
** {{%HangmanError{message: "counter not found for key: {\"julio\", 1, 2}"},
  [{Pass.Cache, :get, 2, [file: 'lib/hangman/pass_cache.ex', line: 168]},
   {Reduction.Engine.Worker, :do_reduce_and_store, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 103]},
   {Reduction.Engine.Worker, :handle_call, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 84]},
   {:gen_server, :try_handle_call, 4, [file: 'gen_server.erl', line: 629]},
   {:gen_server, :handle_msg, 5, [file: 'gen_server.erl', line: 661]},
   {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 240]}]},
 {GenServer, :call,
  [{:via, :gproc, {:n, :l, {:reduction_engine_worker, 9}}},
   {:reduce_and_store, {"julio", 1, 2}, ~r/^[^e][^e]e[^e][^e]i[^e][^e]$/,
    #MapSet<["e"]>}, 5000]}}


11:50:43.020 [error] ** State machine #PID<0.3662.1> terminating 
** Last message in was {:"$gen_sync_event", {#PID<0.3577.1>, #Reference<0.0.1.53678>},
 :game_keep_guessing}
** When State == :intrigued_wall_e
**      Data  == {#Player<[name: "julio", type: :robot, round_no: 1, game_pid: #PID<0.267.0>,
  event_pid: #PID<0.3635.1>,
  round_data: [no: 1, guess: "e", guess_result: :correct_letter,
   round_code: :game_keep_guessing,
   round_status: "--E--I--; score=2; status=KEEP_GUESSING",
   pattern: "--E--I--"]]>, #PID<0.3663.1>}
** Reason for termination = 
** {{%HangmanError{message: "counter not found for key: {\"julio\", 1, 2}"},
  [{Pass.Cache, :get, 2, [file: 'lib/hangman/pass_cache.ex', line: 168]},
   {Reduction.Engine.Worker, :do_reduce_and_store, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 103]},
   {Reduction.Engine.Worker, :handle_call, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 84]},
   {:gen_server, :try_handle_call, 4, [file: 'gen_server.erl', line: 629]},
   {:gen_server, :handle_msg, 5, [file: 'gen_server.erl', line: 661]},
   {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 240]}]},
 {GenServer, :call,
  [{:via, :gproc, {:n, :l, {:reduction_engine_worker, 9}}},
   {:reduce_and_store, {"julio", 1, 2}, ~r/^[^e][^e]e[^e][^e]i[^e][^e]$/,
    #MapSet<["e"]>}, 5000]}}


=CRASH REPORT==== 15-Mar-2016::11:50:44 ===
  crasher:
    initial call: Elixir.Player.FSM:init/1
    pid: <0.3604.1>
    registered_name: []
    exception exit: {{#{'__exception__' => true,
                        '__struct__' => 'Elixir.HangmanError',
                        message => <<"counter not found for key: {\"julio\", 1, 2}">>},
                      [{'Elixir.Pass.Cache',get,2,
                           [{file,"lib/hangman/pass_cache.ex"},{line,168}]},
                       {'Elixir.Reduction.Engine.Worker',do_reduce_and_store,
                           3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,103}]},
                       {'Elixir.Reduction.Engine.Worker',handle_call,3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,84}]},
                       {gen_server,try_handle_call,4,
                           [{file,"gen_server.erl"},{line,629}]},
                       {gen_server,handle_msg,5,
                           [{file,"gen_server.erl"},{line,661}]},
                       {proc_lib,init_p_do_apply,3,
                           [{file,"proc_lib.erl"},{line,240}]}]},
                     {'Elixir.GenServer',call,
                         [{via,gproc,{n,l,{reduction_engine_worker,9}}},
                          {reduce_and_store,
                              {<<"julio">>,1,2},
                              #{'__struct__' => 'Elixir.Regex',
                                opts => <<>>,
                                re_pattern => {re_pattern,0,0,0,
                                    <<69,82,67,80,81,0,0,0,16,0,0,0,1,0,0,0,
                                      255,255,255,255,255,255,255,255,0,0,0,0,
                                      0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,
                                      0,0,0,0,0,0,0,0,0,125,0,21,25,31,101,31,
                                      101,29,101,31,101,31,101,31,101,31,101,
                                      31,101,27,114,0,21,0>>},
                                source => <<"^[^e][^e]e[^e][^e][^e][^e][^e]$">>},
                              #{'__struct__' => 'Elixir.MapSet',
                                map => #{<<"e">> => true}}},
                          5000]}}
      in function  gen_fsm:terminate/7 (gen_fsm.erl, line 626)
    ancestors: [hangman_player_supervisor,<0.136.0>,<0.106.0>,<0.102.0>,
                  <0.101.0>]
    messages: []
    links: [<0.267.0>,<0.3606.1>,<0.137.0>]
    dictionary: []
    trap_exit: false
    status: running
    heap_size: 6772
    stack_size: 27
    reductions: 5976
  neighbours:
    neighbour: [{pid,<0.3606.1>},
                  {registered_name,[]},
                  {initial_call,
                      {'Elixir.Player.Async.Echo',init,['Argument__1']}},
                  {current_function,{gen_fsm,loop,7}},
                  {ancestors,
                      [<0.3604.1>,hangman_player_supervisor,<0.136.0>,
                       <0.106.0>,<0.102.0>,<0.101.0>]},
                  {messages,[]},
                  {links,[<0.3604.1>]},
                  {dictionary,[]},
                  {trap_exit,false},
                  {status,waiting},
                  {heap_size,233},
                  {stack_size,10},
                  {reductions,17}]

11:50:43.022 [error] ** State machine #PID<0.3660.1> terminating 
** Last message in was {:"$gen_sync_event", {#PID<0.3576.1>, #Reference<0.0.1.53669>},
 :game_keep_guessing}
** When State == :intrigued_wall_e
**      Data  == {#Player<[name: "julio", type: :robot, round_no: 1, game_pid: #PID<0.267.0>,
  event_pid: #PID<0.3633.1>,
  round_data: [no: 1, guess: "e", guess_result: :correct_letter,
   round_code: :game_keep_guessing,
   round_status: "--E--I--; score=2; status=KEEP_GUESSING",
   pattern: "--E--I--"]]>, #PID<0.3661.1>}
** Reason for termination = 
** {{%HangmanError{message: "counter not found for key: {\"julio\", 1, 2}"},
  [{Pass.Cache, :get, 2, [file: 'lib/hangman/pass_cache.ex', line: 168]},
   {Reduction.Engine.Worker, :do_reduce_and_store, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 103]},
   {Reduction.Engine.Worker, :handle_call, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 84]},
   {:gen_server, :try_handle_call, 4, [file: 'gen_server.erl', line: 629]},
   {:gen_server, :handle_msg, 5, [file: 'gen_server.erl', line: 661]},
   {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 240]}]},
 {GenServer, :call,
  [{:via, :gproc, {:n, :l, {:reduction_engine_worker, 9}}},
   {:reduce_and_store, {"julio", 1, 2}, ~r/^[^e][^e]e[^e][^e]i[^e][^e]$/,
    #MapSet<["e"]>}, 5000]}}


11:50:43.023 [error] ** State machine #PID<0.3658.1> terminating 
** Last message in was {:"$gen_sync_event", {#PID<0.3575.1>, #Reference<0.0.1.53663>},
 :game_keep_guessing}
** When State == :intrigued_wall_e
**      Data  == {#Player<[name: "julio", type: :robot, round_no: 1, game_pid: #PID<0.267.0>,
  event_pid: #PID<0.3631.1>,
  round_data: [no: 1, guess: "e", guess_result: :correct_letter,
   round_code: :game_keep_guessing,
   round_status: "--E--I--; score=2; status=KEEP_GUESSING",
   pattern: "--E--I--"]]>, #PID<0.3659.1>}
** Reason for termination = 
** {{%HangmanError{message: "counter not found for key: {\"julio\", 1, 2}"},
  [{Pass.Cache, :get, 2, [file: 'lib/hangman/pass_cache.ex', line: 168]},
   {Reduction.Engine.Worker, :do_reduce_and_store, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 103]},
   {Reduction.Engine.Worker, :handle_call, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 84]},
   {:gen_server, :try_handle_call, 4, [file: 'gen_server.erl', line: 629]},
   {:gen_server, :handle_msg, 5, [file: 'gen_server.erl', line: 661]},
   {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 240]}]},
 {GenServer, :call,
  [{:via, :gproc, {:n, :l, {:reduction_engine_worker, 9}}},
   {:reduce_and_store, {"julio", 1, 2}, ~r/^[^e][^e]e[^e][^e]i[^e][^e]$/,
    #MapSet<["e"]>}, 5000]}}


11:50:43.025 [error] ** State machine #PID<0.3650.1> terminating 
** Last message in was {:"$gen_sync_event", {#PID<0.3571.1>, #Reference<0.0.1.53641>},
 :game_keep_guessing}
** When State == :intrigued_wall_e
**      Data  == {#Player<[name: "julio", type: :robot, round_no: 1, game_pid: #PID<0.267.0>,
  event_pid: #PID<0.3623.1>,
  round_data: [no: 1, guess: "e", guess_result: :correct_letter,
   round_code: :game_keep_guessing,
   round_status: "--E--I--; score=2; status=KEEP_GUESSING",
   pattern: "--E--I--"]]>, #PID<0.3651.1>}
** Reason for termination = 
** {{%HangmanError{message: "counter not found for key: {\"julio\", 1, 2}"},
  [{Pass.Cache, :get, 2, [file: 'lib/hangman/pass_cache.ex', line: 168]},
   {Reduction.Engine.Worker, :do_reduce_and_store, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 103]},
   {Reduction.Engine.Worker, :handle_call, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 84]},
   {:gen_server, :try_handle_call, 4, [file: 'gen_server.erl', line: 629]},
   {:gen_server, :handle_msg, 5, [file: 'gen_server.erl', line: 661]},
   {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 240]}]},
 {GenServer, :call,
  [{:via, :gproc, {:n, :l, {:reduction_engine_worker, 9}}},
   {:reduce_and_store, {"julio", 1, 2}, ~r/^[^e][^e]e[^e][^e]i[^e][^e]$/,
    #MapSet<["e"]>}, 5000]}}


=CRASH REPORT==== 15-Mar-2016::11:50:44 ===
  crasher:
    initial call: Elixir.Player.FSM:init/1
    pid: <0.3664.1>
    registered_name: []
    exception exit: {{#{'__exception__' => true,
                        '__struct__' => 'Elixir.HangmanError',
                        message => <<"counter not found for key: {\"julio\", 1, 2}">>},
                      [{'Elixir.Pass.Cache',get,2,
                           [{file,"lib/hangman/pass_cache.ex"},{line,168}]},
                       {'Elixir.Reduction.Engine.Worker',do_reduce_and_store,
                           3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,103}]},
                       {'Elixir.Reduction.Engine.Worker',handle_call,3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,84}]},
                       {gen_server,try_handle_call,4,
                           [{file,"gen_server.erl"},{line,629}]},
                       {gen_server,handle_msg,5,
                           [{file,"gen_server.erl"},{line,661}]},
                       {proc_lib,init_p_do_apply,3,
                           [{file,"proc_lib.erl"},{line,240}]}]},
                     {'Elixir.GenServer',call,
                         [{via,gproc,{n,l,{reduction_engine_worker,9}}},
                          {reduce_and_store,
                              {<<"julio">>,1,2},
                              #{'__struct__' => 'Elixir.Regex',
                                opts => <<>>,
                                re_pattern => {re_pattern,0,0,0,
                                    <<69,82,67,80,81,0,0,0,16,0,0,0,1,0,0,0,
                                      255,255,255,255,255,255,255,255,0,0,0,0,
                                      0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,
                                      0,0,0,0,0,0,0,0,0,125,0,21,25,31,101,31,
                                      101,29,101,31,101,31,101,29,105,31,101,
                                      31,101,27,114,0,21,0>>},
                                source => <<"^[^e][^e]e[^e][^e]i[^e][^e]$">>},
                              #{'__struct__' => 'Elixir.MapSet',
                                map => #{<<"e">> => true}}},
                          5000]}}
      in function  gen_fsm:terminate/7 (gen_fsm.erl, line 626)
    ancestors: [hangman_player_supervisor,<0.136.0>,<0.106.0>,<0.102.0>,
                  <0.101.0>]
    messages: []
    links: [<0.267.0>,<0.3665.1>,<0.137.0>]
    dictionary: []
    trap_exit: false
    status: running
    heap_size: 4185
    stack_size: 27
    reductions: 5976
  neighbours:
    neighbour: [{pid,<0.3665.1>},
                  {registered_name,[]},
                  {initial_call,
                      {'Elixir.Player.Async.Echo',init,['Argument__1']}},
                  {current_function,{gen_fsm,loop,7}},
                  {ancestors,
                      [<0.3664.1>,hangman_player_supervisor,<0.136.0>,
                       <0.106.0>,<0.102.0>,<0.101.0>]},
                  {messages,[]},
                  {links,[<0.3664.1>]},
                  {dictionary,[]},
                  {trap_exit,false},
                  {status,waiting},
                  {heap_size,233},
                  {stack_size,10},
                  {reductions,17}]

11:50:43.026 [error] ** State machine #PID<0.3608.1> terminating 
** Last message in was {:"$gen_sync_event", {#PID<0.3553.1>, #Reference<0.0.1.53445>},
 :game_keep_guessing}
** When State == :intrigued_wall_e
**      Data  == {#Player<[name: "julio", type: :robot, round_no: 1, game_pid: #PID<0.267.0>,
  event_pid: #PID<0.3595.1>,
  round_data: [no: 1, guess: "e", guess_result: :correct_letter,
   round_code: :game_keep_guessing,
   round_status: "--E-----; score=1; status=KEEP_GUESSING",
   pattern: "--E-----"]]>, #PID<0.3610.1>}
** Reason for termination = 
** {{%HangmanError{message: "counter not found for key: {\"julio\", 1, 2}"},
  [{Pass.Cache, :get, 2, [file: 'lib/hangman/pass_cache.ex', line: 168]},
   {Reduction.Engine.Worker, :do_reduce_and_store, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 103]},
   {Reduction.Engine.Worker, :handle_call, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 84]},
   {:gen_server, :try_handle_call, 4, [file: 'gen_server.erl', line: 629]},
   {:gen_server, :handle_msg, 5, [file: 'gen_server.erl', line: 661]},
   {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 240]}]},
 {GenServer, :call,
  [{:via, :gproc, {:n, :l, {:reduction_engine_worker, 9}}},
   {:reduce_and_store, {"julio", 1, 2}, ~r/^[^e][^e]e[^e][^e][^e][^e][^e]$/,
    #MapSet<["e"]>}, 5000]}}


11:50:43.028 [error] ** State machine #PID<0.3612.1> terminating 
** Last message in was {:"$gen_sync_event", {#PID<0.3554.1>, #Reference<0.0.1.53448>},
 :game_keep_guessing}
** When State == :intrigued_wall_e
**      Data  == {#Player<[name: "julio", type: :robot, round_no: 1, game_pid: #PID<0.267.0>,
  event_pid: #PID<0.3597.1>,
  round_data: [no: 1, guess: "e", guess_result: :correct_letter,
   round_code: :game_keep_guessing,
   round_status: "--E-----; score=1; status=KEEP_GUESSING",
   pattern: "--E-----"]]>, #PID<0.3614.1>}
** Reason for termination = 
** {{%HangmanError{message: "counter not found for key: {\"julio\", 1, 2}"},
  [{Pass.Cache, :get, 2, [file: 'lib/hangman/pass_cache.ex', line: 168]},
   {Reduction.Engine.Worker, :do_reduce_and_store, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 103]},
   {Reduction.Engine.Worker, :handle_call, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 84]},
   {:gen_server, :try_handle_call, 4, [file: 'gen_server.erl', line: 629]},
   {:gen_server, :handle_msg, 5, [file: 'gen_server.erl', line: 661]},
   {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 240]}]},
 {GenServer, :call,
  [{:via, :gproc, {:n, :l, {:reduction_engine_worker, 9}}},
   {:reduce_and_store, {"julio", 1, 2}, ~r/^[^e][^e]e[^e][^e][^e][^e][^e]$/,
    #MapSet<["e"]>}, 5000]}}


11:50:43.029 [error] ** State machine #PID<0.3616.1> terminating 
** Last message in was {:"$gen_sync_event", {#PID<0.3555.1>, #Reference<0.0.1.53472>},
 :game_keep_guessing}
** When State == :intrigued_wall_e
**      Data  == {#Player<[name: "julio", type: :robot, round_no: 1, game_pid: #PID<0.267.0>,
  event_pid: #PID<0.3600.1>,
  round_data: [no: 1, guess: "e", guess_result: :correct_letter,
   round_code: :game_keep_guessing,
   round_status: "--E-----; score=1; status=KEEP_GUESSING",
   pattern: "--E-----"]]>, #PID<0.3617.1>}
** Reason for termination = 
** {{%HangmanError{message: "counter not found for key: {\"julio\", 1, 2}"},
  [{Pass.Cache, :get, 2, [file: 'lib/hangman/pass_cache.ex', line: 168]},
   {Reduction.Engine.Worker, :do_reduce_and_store, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 103]},
   {Reduction.Engine.Worker, :handle_call, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 84]},
   {:gen_server, :try_handle_call, 4, [file: 'gen_server.erl', line: 629]},
   {:gen_server, :handle_msg, 5, [file: 'gen_server.erl', line: 661]},
   {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 240]}]},
 {GenServer, :call,
  [{:via, :gproc, {:n, :l, {:reduction_engine_worker, 9}}},
   {:reduce_and_store, {"julio", 1, 2}, ~r/^[^e][^e]e[^e][^e][^e][^e][^e]$/,
    #MapSet<["e"]>}, 5000]}}


=CRASH REPORT==== 15-Mar-2016::11:50:44 ===
  crasher:
    initial call: Elixir.Player.FSM:init/1
    pid: <0.3612.1>
    registered_name: []
    exception exit: {{#{'__exception__' => true,
                        '__struct__' => 'Elixir.HangmanError',
                        message => <<"counter not found for key: {\"julio\", 1, 2}">>},
                      [{'Elixir.Pass.Cache',get,2,
                           [{file,"lib/hangman/pass_cache.ex"},{line,168}]},
                       {'Elixir.Reduction.Engine.Worker',do_reduce_and_store,
                           3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,103}]},
                       {'Elixir.Reduction.Engine.Worker',handle_call,3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,84}]},
                       {gen_server,try_handle_call,4,
                           [{file,"gen_server.erl"},{line,629}]},
                       {gen_server,handle_msg,5,
                           [{file,"gen_server.erl"},{line,661}]},
                       {proc_lib,init_p_do_apply,3,
                           [{file,"proc_lib.erl"},{line,240}]}]},
                     {'Elixir.GenServer',call,
                         [{via,gproc,{n,l,{reduction_engine_worker,9}}},
                          {reduce_and_store,
                              {<<"julio">>,1,2},
                              #{'__struct__' => 'Elixir.Regex',
                                opts => <<>>,
                                re_pattern => {re_pattern,0,0,0,
                                    <<69,82,67,80,81,0,0,0,16,0,0,0,1,0,0,0,
                                      255,255,255,255,255,255,255,255,0,0,0,0,
                                      0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,
                                      0,0,0,0,0,0,0,0,0,125,0,21,25,31,101,31,
                                      101,29,101,31,101,31,101,31,101,31,101,
                                      31,101,27,114,0,21,0>>},
                                source => <<"^[^e][^e]e[^e][^e][^e][^e][^e]$">>},
                              #{'__struct__' => 'Elixir.MapSet',
                                map => #{<<"e">> => true}}},
                          5000]}}
      in function  gen_fsm:terminate/7 (gen_fsm.erl, line 626)
    ancestors: [hangman_player_supervisor,<0.136.0>,<0.106.0>,<0.102.0>,
                  <0.101.0>]
    messages: []
    links: [<0.267.0>,<0.3614.1>,<0.137.0>]
    dictionary: []
    trap_exit: false
    status: running
    heap_size: 6772
    stack_size: 27
    reductions: 5744
  neighbours:
    neighbour: [{pid,<0.3614.1>},
                  {registered_name,[]},
                  {initial_call,
                      {'Elixir.Player.Async.Echo',init,['Argument__1']}},
                  {current_function,{gen_fsm,loop,7}},
                  {ancestors,
                      [<0.3612.1>,hangman_player_supervisor,<0.136.0>,
                       <0.106.0>,<0.102.0>,<0.101.0>]},
                  {messages,[]},
                  {links,[<0.3612.1>]},
                  {dictionary,[]},
                  {trap_exit,false},
                  {status,waiting},
                  {heap_size,233},
                  {stack_size,10},
                  {reductions,17}]

11:50:43.030 [error] ** State machine #PID<0.3618.1> terminating 
** Last message in was {:"$gen_sync_event", {#PID<0.3557.1>, #Reference<0.0.1.53483>},
 :game_keep_guessing}
** When State == :intrigued_wall_e
**      Data  == {#Player<[name: "julio", type: :robot, round_no: 1, game_pid: #PID<0.267.0>,
  event_pid: #PID<0.3603.1>,
  round_data: [no: 1, guess: "e", guess_result: :correct_letter,
   round_code: :game_keep_guessing,
   round_status: "--E-----; score=1; status=KEEP_GUESSING",
   pattern: "--E-----"]]>, #PID<0.3620.1>}
** Reason for termination = 
** {{%HangmanError{message: "counter not found for key: {\"julio\", 1, 2}"},
  [{Pass.Cache, :get, 2, [file: 'lib/hangman/pass_cache.ex', line: 168]},
   {Reduction.Engine.Worker, :do_reduce_and_store, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 103]},
   {Reduction.Engine.Worker, :handle_call, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 84]},
   {:gen_server, :try_handle_call, 4, [file: 'gen_server.erl', line: 629]},
   {:gen_server, :handle_msg, 5, [file: 'gen_server.erl', line: 661]},
   {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 240]}]},
 {GenServer, :call,
  [{:via, :gproc, {:n, :l, {:reduction_engine_worker, 9}}},
   {:reduce_and_store, {"julio", 1, 2}, ~r/^[^e][^e]e[^e][^e][^e][^e][^e]$/,
    #MapSet<["e"]>}, 5000]}}


11:50:43.049 [error] ** State machine #PID<0.3594.1> terminating 
** Last message in was {:"$gen_sync_event", {#PID<0.3559.1>, #Reference<0.0.1.53754>},
 :game_keep_guessing}
** When State == :intrigued_wall_e
**      Data  == {#Player<[name: "julio", type: :robot, round_no: 2, game_pid: #PID<0.267.0>,
  event_pid: #PID<0.3587.1>,
  round_data: [no: 2, guess: "i", guess_result: :correct_letter,
   round_code: :game_keep_guessing,
   round_status: "--E--I--; score=2; status=KEEP_GUESSING",
   pattern: "--E--I--"]]>, #PID<0.3596.1>}
** Reason for termination = 
** {{%HangmanError{message: "counter not found for key: {\"julio\", 1, 2}"},
  [{Pass.Cache, :get, 2, [file: 'lib/hangman/pass_cache.ex', line: 168]},
   {Reduction.Engine.Worker, :do_reduce_and_store, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 103]},
   {Reduction.Engine.Worker, :handle_call, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 84]},
   {:gen_server, :try_handle_call, 4, [file: 'gen_server.erl', line: 629]},
   {:gen_server, :handle_msg, 5, [file: 'gen_server.erl', line: 661]},
   {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 240]}]},
 {GenServer, :call,
  [{:via, :gproc, {:n, :l, {:reduction_engine_worker, 9}}},
   {:reduce_and_store, {"julio", 1, 3}, ~r/^[^ei][^ei]e[^ei][^ei]i[^ei][^ei]$/,
    #MapSet<["e", "i"]>}, 5000]}}


=CRASH REPORT==== 15-Mar-2016::11:50:44 ===
  crasher:
    initial call: Elixir.Player.FSM:init/1
    pid: <0.3668.1>
    registered_name: []
    exception exit: {{#{'__exception__' => true,
                        '__struct__' => 'Elixir.HangmanError',
                        message => <<"counter not found for key: {\"julio\", 1, 2}">>},
                      [{'Elixir.Pass.Cache',get,2,
                           [{file,"lib/hangman/pass_cache.ex"},{line,168}]},
                       {'Elixir.Reduction.Engine.Worker',do_reduce_and_store,
                           3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,103}]},
                       {'Elixir.Reduction.Engine.Worker',handle_call,3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,84}]},
                       {gen_server,try_handle_call,4,
                           [{file,"gen_server.erl"},{line,629}]},
                       {gen_server,handle_msg,5,
                           [{file,"gen_server.erl"},{line,661}]},
                       {proc_lib,init_p_do_apply,3,
                           [{file,"proc_lib.erl"},{line,240}]}]},
                     {'Elixir.GenServer',call,
                         [{via,gproc,{n,l,{reduction_engine_worker,9}}},
                          {reduce_and_store,
                              {<<"julio">>,1,2},
                              #{'__struct__' => 'Elixir.Regex',
                                opts => <<>>,
                                re_pattern => {re_pattern,0,0,0,
                                    <<69,82,67,80,81,0,0,0,16,0,0,0,1,0,0,0,
                                      255,255,255,255,255,255,255,255,0,0,0,0,
                                      0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,
                                      0,0,0,0,0,0,0,0,0,125,0,21,25,31,101,31,
                                      101,29,101,31,101,31,101,29,105,31,101,
                                      31,101,27,114,0,21,0>>},
                                source => <<"^[^e][^e]e[^e][^e]i[^e][^e]$">>},
                              #{'__struct__' => 'Elixir.MapSet',
                                map => #{<<"e">> => true}}},
                          5000]}}
      in function  gen_fsm:terminate/7 (gen_fsm.erl, line 626)
    ancestors: [hangman_player_supervisor,<0.136.0>,<0.106.0>,<0.102.0>,
                  <0.101.0>]
    messages: []
    links: [<0.267.0>,<0.3669.1>,<0.137.0>]
    dictionary: []
    trap_exit: false
    status: running
    heap_size: 4185
    stack_size: 27
    reductions: 5988
  neighbours:
    neighbour: [{pid,<0.3669.1>},
                  {registered_name,[]},
                  {initial_call,
                      {'Elixir.Player.Async.Echo',init,['Argument__1']}},
                  {current_function,{gen_fsm,loop,7}},
                  {ancestors,
                      [<0.3668.1>,hangman_player_supervisor,<0.136.0>,
                       <0.106.0>,<0.102.0>,<0.101.0>]},
                  {messages,[]},
                  {links,[<0.3668.1>]},
                  {dictionary,[]},
                  {trap_exit,false},
                  {status,waiting},
                  {heap_size,233},
                  {stack_size,10},
                  {reductions,17}]

11:50:43.051 [error] ** State machine #PID<0.3590.1> terminating 
** Last message in was {:"$gen_sync_event", {#PID<0.3558.1>, #Reference<0.0.1.53739>},
 :game_keep_guessing}
** When State == :intrigued_wall_e
**      Data  == {#Player<[name: "julio", type: :robot, round_no: 2, game_pid: #PID<0.267.0>,
  event_pid: #PID<0.3585.1>,
  round_data: [no: 2, guess: "i", guess_result: :correct_letter,
   round_code: :game_keep_guessing,
   round_status: "--E--I--; score=2; status=KEEP_GUESSING",
   pattern: "--E--I--"]]>, #PID<0.3592.1>}
** Reason for termination = 
** {{%HangmanError{message: "counter not found for key: {\"julio\", 1, 2}"},
  [{Pass.Cache, :get, 2, [file: 'lib/hangman/pass_cache.ex', line: 168]},
   {Reduction.Engine.Worker, :do_reduce_and_store, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 103]},
   {Reduction.Engine.Worker, :handle_call, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 84]},
   {:gen_server, :try_handle_call, 4, [file: 'gen_server.erl', line: 629]},
   {:gen_server, :handle_msg, 5, [file: 'gen_server.erl', line: 661]},
   {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 240]}]},
 {GenServer, :call,
  [{:via, :gproc, {:n, :l, {:reduction_engine_worker, 9}}},
   {:reduce_and_store, {"julio", 1, 3}, ~r/^[^ei][^ei]e[^ei][^ei]i[^ei][^ei]$/,
    #MapSet<["e", "i"]>}, 5000]}}


11:50:43.052 [error] ** State machine #PID<0.3601.1> terminating 
** Last message in was {:"$gen_sync_event", {#PID<0.3561.1>, #Reference<0.0.1.53437>},
 :game_keep_guessing}
** When State == :intrigued_wall_e
**      Data  == {#Player<[name: "julio", type: :robot, round_no: 1, game_pid: #PID<0.267.0>,
  event_pid: #PID<0.3591.1>,
  round_data: [no: 1, guess: "e", guess_result: :correct_letter,
   round_code: :game_keep_guessing,
   round_status: "--E-----; score=1; status=KEEP_GUESSING",
   pattern: "--E-----"]]>, #PID<0.3602.1>}
** Reason for termination = 
** {{%HangmanError{message: "counter not found for key: {\"julio\", 1, 2}"},
  [{Pass.Cache, :get, 2, [file: 'lib/hangman/pass_cache.ex', line: 168]},
   {Reduction.Engine.Worker, :do_reduce_and_store, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 103]},
   {Reduction.Engine.Worker, :handle_call, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 84]},
   {:gen_server, :try_handle_call, 4, [file: 'gen_server.erl', line: 629]},
   {:gen_server, :handle_msg, 5, [file: 'gen_server.erl', line: 661]},
   {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 240]}]},
 {GenServer, :call,
  [{:via, :gproc, {:n, :l, {:reduction_engine_worker, 9}}},
   {:reduce_and_store, {"julio", 1, 2}, ~r/^[^e][^e]e[^e][^e][^e][^e][^e]$/,
    #MapSet<["e"]>}, 5000]}}


=CRASH REPORT==== 15-Mar-2016::11:50:44 ===
  crasher:
    initial call: Elixir.Player.FSM:init/1
    pid: <0.3670.1>
    registered_name: []
    exception exit: {{#{'__exception__' => true,
                        '__struct__' => 'Elixir.HangmanError',
                        message => <<"counter not found for key: {\"julio\", 1, 2}">>},
                      [{'Elixir.Pass.Cache',get,2,
                           [{file,"lib/hangman/pass_cache.ex"},{line,168}]},
                       {'Elixir.Reduction.Engine.Worker',do_reduce_and_store,
                           3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,103}]},
                       {'Elixir.Reduction.Engine.Worker',handle_call,3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,84}]},
                       {gen_server,try_handle_call,4,
                           [{file,"gen_server.erl"},{line,629}]},
                       {gen_server,handle_msg,5,
                           [{file,"gen_server.erl"},{line,661}]},
                       {proc_lib,init_p_do_apply,3,
                           [{file,"proc_lib.erl"},{line,240}]}]},
                     {'Elixir.GenServer',call,
                         [{via,gproc,{n,l,{reduction_engine_worker,9}}},
                          {reduce_and_store,
                              {<<"julio">>,1,2},
                              #{'__struct__' => 'Elixir.Regex',
                                opts => <<>>,
                                re_pattern => {re_pattern,0,0,0,
                                    <<69,82,67,80,81,0,0,0,16,0,0,0,1,0,0,0,
                                      255,255,255,255,255,255,255,255,0,0,0,0,
                                      0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,
                                      0,0,0,0,0,0,0,0,0,125,0,21,25,31,101,31,
                                      101,29,101,31,101,31,101,29,105,31,101,
                                      31,101,27,114,0,21,0>>},
                                source => <<"^[^e][^e]e[^e][^e]i[^e][^e]$">>},
                              #{'__struct__' => 'Elixir.MapSet',
                                map => #{<<"e">> => true}}},
                          5000]}}
      in function  gen_fsm:terminate/7 (gen_fsm.erl, line 626)
    ancestors: [hangman_player_supervisor,<0.136.0>,<0.106.0>,<0.102.0>,
                  <0.101.0>]
    messages: []
    links: [<0.267.0>,<0.3671.1>,<0.137.0>]
    dictionary: []
    trap_exit: false
    status: running
    heap_size: 4185
    stack_size: 27
    reductions: 5996
  neighbours:
    neighbour: [{pid,<0.3671.1>},
                  {registered_name,[]},
                  {initial_call,
                      {'Elixir.Player.Async.Echo',init,['Argument__1']}},
                  {current_function,{gen_fsm,loop,7}},
                  {ancestors,
                      [<0.3670.1>,hangman_player_supervisor,<0.136.0>,
                       <0.106.0>,<0.102.0>,<0.101.0>]},
                  {messages,[]},
                  {links,[<0.3670.1>]},
                  {dictionary,[]},
                  {trap_exit,false},
                  {status,waiting},
                  {heap_size,233},
                  {stack_size,10},
                  {reductions,17}]

11:50:44.497 [error] ** State machine #PID<0.3604.1> terminating 
** Last message in was {:"$gen_sync_event", {#PID<0.3562.1>, #Reference<0.0.1.53461>},
 :game_keep_guessing}
** When State == :intrigued_wall_e
**      Data  == {#Player<[name: "julio", type: :robot, round_no: 1, game_pid: #PID<0.267.0>,
  event_pid: #PID<0.3593.1>,
  round_data: [no: 1, guess: "e", guess_result: :correct_letter,
   round_code: :game_keep_guessing,
   round_status: "--E-----; score=1; status=KEEP_GUESSING",
   pattern: "--E-----"]]>, #PID<0.3606.1>}
** Reason for termination = 
** {{%HangmanError{message: "counter not found for key: {\"julio\", 1, 2}"},
  [{Pass.Cache, :get, 2, [file: 'lib/hangman/pass_cache.ex', line: 168]},
   {Reduction.Engine.Worker, :do_reduce_and_store, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 103]},
   {Reduction.Engine.Worker, :handle_call, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 84]},
   {:gen_server, :try_handle_call, 4, [file: 'gen_server.erl', line: 629]},
   {:gen_server, :handle_msg, 5, [file: 'gen_server.erl', line: 661]},
   {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 240]}]},
 {GenServer, :call,
  [{:via, :gproc, {:n, :l, {:reduction_engine_worker, 9}}},
   {:reduce_and_store, {"julio", 1, 2}, ~r/^[^e][^e]e[^e][^e][^e][^e][^e]$/,
    #MapSet<["e"]>}, 5000]}}


11:50:44.633 [error] ** State machine #PID<0.3664.1> terminating 
** Last message in was {:"$gen_sync_event", {#PID<0.3578.1>, #Reference<0.0.1.53718>},
 :game_keep_guessing}
** When State == :intrigued_wall_e
**      Data  == {#Player<[name: "julio", type: :robot, round_no: 1, game_pid: #PID<0.267.0>,
  event_pid: #PID<0.3637.1>,
  round_data: [no: 1, guess: "e", guess_result: :correct_letter,
   round_code: :game_keep_guessing,
   round_status: "--E--I--; score=2; status=KEEP_GUESSING",
   pattern: "--E--I--"]]>, #PID<0.3665.1>}
** Reason for termination = 
** {{%HangmanError{message: "counter not found for key: {\"julio\", 1, 2}"},
  [{Pass.Cache, :get, 2, [file: 'lib/hangman/pass_cache.ex', line: 168]},
   {Reduction.Engine.Worker, :do_reduce_and_store, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 103]},
   {Reduction.Engine.Worker, :handle_call, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 84]},
   {:gen_server, :try_handle_call, 4, [file: 'gen_server.erl', line: 629]},
   {:gen_server, :handle_msg, 5, [file: 'gen_server.erl', line: 661]},
   {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 240]}]},
 {GenServer, :call,
  [{:via, :gproc, {:n, :l, {:reduction_engine_worker, 9}}},
   {:reduce_and_store, {"julio", 1, 2}, ~r/^[^e][^e]e[^e][^e]i[^e][^e]$/,
    #MapSet<["e"]>}, 5000]}}


11:50:44.823 [error] ** State machine #PID<0.3668.1> terminating 
** Last message in was {:"$gen_sync_event", {#PID<0.3580.1>, #Reference<0.0.1.53729>},
 :game_keep_guessing}
** When State == :intrigued_wall_e
**      Data  == {#Player<[name: "julio", type: :robot, round_no: 1, game_pid: #PID<0.267.0>,
  event_pid: #PID<0.3643.1>,
  round_data: [no: 1, guess: "e", guess_result: :correct_letter,
   round_code: :game_keep_guessing,
   round_status: "--E--I--; score=2; status=KEEP_GUESSING",
   pattern: "--E--I--"]]>, #PID<0.3669.1>}
** Reason for termination = 
** {{%HangmanError{message: "counter not found for key: {\"julio\", 1, 2}"},
  [{Pass.Cache, :get, 2, [file: 'lib/hangman/pass_cache.ex', line: 168]},
   {Reduction.Engine.Worker, :do_reduce_and_store, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 103]},
   {Reduction.Engine.Worker, :handle_call, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 84]},
   {:gen_server, :try_handle_call, 4, [file: 'gen_server.erl', line: 629]},
   {:gen_server, :handle_msg, 5, [file: 'gen_server.erl', line: 661]},
   {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 240]}]},
 {GenServer, :call,
  [{:via, :gproc, {:n, :l, {:reduction_engine_worker, 9}}},
   {:reduce_and_store, {"julio", 1, 2}, ~r/^[^e][^e]e[^e][^e]i[^e][^e]$/,
    #MapSet<["e"]>}, 5000]}}


=CRASH REPORT==== 15-Mar-2016::11:50:44 ===
  crasher:
    initial call: Elixir.Player.FSM:init/1
    pid: <0.3616.1>
    registered_name: []
    exception exit: {{#{'__exception__' => true,
                        '__struct__' => 'Elixir.HangmanError',
                        message => <<"counter not found for key: {\"julio\", 1, 2}">>},
                      [{'Elixir.Pass.Cache',get,2,
                           [{file,"lib/hangman/pass_cache.ex"},{line,168}]},
                       {'Elixir.Reduction.Engine.Worker',do_reduce_and_store,
                           3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,103}]},
                       {'Elixir.Reduction.Engine.Worker',handle_call,3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,84}]},
                       {gen_server,try_handle_call,4,
                           [{file,"gen_server.erl"},{line,629}]},
                       {gen_server,handle_msg,5,
                           [{file,"gen_server.erl"},{line,661}]},
                       {proc_lib,init_p_do_apply,3,
                           [{file,"proc_lib.erl"},{line,240}]}]},
                     {'Elixir.GenServer',call,
                         [{via,gproc,{n,l,{reduction_engine_worker,9}}},
                          {reduce_and_store,
                              {<<"julio">>,1,2},
                              #{'__struct__' => 'Elixir.Regex',
                                opts => <<>>,
                                re_pattern => {re_pattern,0,0,0,
                                    <<69,82,67,80,81,0,0,0,16,0,0,0,1,0,0,0,
                                      255,255,255,255,255,255,255,255,0,0,0,0,
                                      0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,
                                      0,0,0,0,0,0,0,0,0,125,0,21,25,31,101,31,
                                      101,29,101,31,101,31,101,31,101,31,101,
                                      31,101,27,114,0,21,0>>},
                                source => <<"^[^e][^e]e[^e][^e][^e][^e][^e]$">>},
                              #{'__struct__' => 'Elixir.MapSet',
                                map => #{<<"e">> => true}}},
                          5000]}}
      in function  gen_fsm:terminate/7 (gen_fsm.erl, line 626)
    ancestors: [hangman_player_supervisor,<0.136.0>,<0.106.0>,<0.102.0>,
                  <0.101.0>]
    messages: []
    links: [<0.267.0>,<0.3617.1>,<0.137.0>]
    dictionary: []
    trap_exit: false
    status: running
    heap_size: 6772
    stack_size: 27
    reductions: 5744
  neighbours:
    neighbour: [{pid,<0.3617.1>},
                  {registered_name,[]},
                  {initial_call,
                      {'Elixir.Player.Async.Echo',init,['Argument__1']}},
                  {current_function,{gen_fsm,loop,7}},
                  {ancestors,
                      [<0.3616.1>,hangman_player_supervisor,<0.136.0>,
                       <0.106.0>,<0.102.0>,<0.101.0>]},
                  {messages,[]},
                  {links,[<0.3616.1>]},
                  {dictionary,[]},
                  {trap_exit,false},
                  {status,waiting},
                  {heap_size,233},
                  {stack_size,10},
                  {reductions,17}]

11:50:44.880 [error] ** State machine #PID<0.3670.1> terminating 
** Last message in was {:"$gen_sync_event", {#PID<0.3581.1>, #Reference<0.0.1.53732>},
 :game_keep_guessing}
** When State == :intrigued_wall_e
**      Data  == {#Player<[name: "julio", type: :robot, round_no: 1, game_pid: #PID<0.267.0>,
  event_pid: #PID<0.3645.1>,
  round_data: [no: 1, guess: "e", guess_result: :correct_letter,
   round_code: :game_keep_guessing,
   round_status: "--E--I--; score=2; status=KEEP_GUESSING",
   pattern: "--E--I--"]]>, #PID<0.3671.1>}
** Reason for termination = 
** {{%HangmanError{message: "counter not found for key: {\"julio\", 1, 2}"},
  [{Pass.Cache, :get, 2, [file: 'lib/hangman/pass_cache.ex', line: 168]},
   {Reduction.Engine.Worker, :do_reduce_and_store, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 103]},
   {Reduction.Engine.Worker, :handle_call, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 84]},
   {:gen_server, :try_handle_call, 4, [file: 'gen_server.erl', line: 629]},
   {:gen_server, :handle_msg, 5, [file: 'gen_server.erl', line: 661]},
   {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 240]}]},
 {GenServer, :call,
  [{:via, :gproc, {:n, :l, {:reduction_engine_worker, 9}}},
   {:reduce_and_store, {"julio", 1, 2}, ~r/^[^e][^e]e[^e][^e]i[^e][^e]$/,
    #MapSet<["e"]>}, 5000]}}


=CRASH REPORT==== 15-Mar-2016::11:50:45 ===
  crasher:
    initial call: Elixir.Player.FSM:init/1
    pid: <0.3618.1>
    registered_name: []
    exception exit: {{#{'__exception__' => true,
                        '__struct__' => 'Elixir.HangmanError',
                        message => <<"counter not found for key: {\"julio\", 1, 2}">>},
                      [{'Elixir.Pass.Cache',get,2,
                           [{file,"lib/hangman/pass_cache.ex"},{line,168}]},
                       {'Elixir.Reduction.Engine.Worker',do_reduce_and_store,
                           3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,103}]},
                       {'Elixir.Reduction.Engine.Worker',handle_call,3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,84}]},
                       {gen_server,try_handle_call,4,
                           [{file,"gen_server.erl"},{line,629}]},
                       {gen_server,handle_msg,5,
                           [{file,"gen_server.erl"},{line,661}]},
                       {proc_lib,init_p_do_apply,3,
                           [{file,"proc_lib.erl"},{line,240}]}]},
                     {'Elixir.GenServer',call,
                         [{via,gproc,{n,l,{reduction_engine_worker,9}}},
                          {reduce_and_store,
                              {<<"julio">>,1,2},
                              #{'__struct__' => 'Elixir.Regex',
                                opts => <<>>,
                                re_pattern => {re_pattern,0,0,0,
                                    <<69,82,67,80,81,0,0,0,16,0,0,0,1,0,0,0,
                                      255,255,255,255,255,255,255,255,0,0,0,0,
                                      0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,
                                      0,0,0,0,0,0,0,0,0,125,0,21,25,31,101,31,
                                      101,29,101,31,101,31,101,31,101,31,101,
                                      31,101,27,114,0,21,0>>},
                                source => <<"^[^e][^e]e[^e][^e][^e][^e][^e]$">>},
                              #{'__struct__' => 'Elixir.MapSet',
                                map => #{<<"e">> => true}}},
                          5000]}}
      in function  gen_fsm:terminate/7 (gen_fsm.erl, line 626)
    ancestors: [hangman_player_supervisor,<0.136.0>,<0.106.0>,<0.102.0>,
                  <0.101.0>]
    messages: []
    links: [<0.267.0>,<0.3620.1>,<0.137.0>]
    dictionary: []
    trap_exit: false
    status: running
    heap_size: 6772
    stack_size: 27
    reductions: 5744
  neighbours:
    neighbour: [{pid,<0.3620.1>},
                  {registered_name,[]},
                  {initial_call,
                      {'Elixir.Player.Async.Echo',init,['Argument__1']}},
                  {current_function,{gen_fsm,loop,7}},
                  {ancestors,
                      [<0.3618.1>,hangman_player_supervisor,<0.136.0>,
                       <0.106.0>,<0.102.0>,<0.101.0>]},
                  {messages,[]},
                  {links,[<0.3618.1>]},
                  {dictionary,[]},
                  {trap_exit,false},
                  {status,waiting},
                  {heap_size,233},
                  {stack_size,10},
                  {reductions,17}]

=CRASH REPORT==== 15-Mar-2016::11:50:45 ===
  crasher:
    initial call: Elixir.Player.FSM:init/1
    pid: <0.3594.1>
    registered_name: []
    exception exit: {{#{'__exception__' => true,
                        '__struct__' => 'Elixir.HangmanError',
                        message => <<"counter not found for key: {\"julio\", 1, 2}">>},
                      [{'Elixir.Pass.Cache',get,2,
                           [{file,"lib/hangman/pass_cache.ex"},{line,168}]},
                       {'Elixir.Reduction.Engine.Worker',do_reduce_and_store,
                           3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,103}]},
                       {'Elixir.Reduction.Engine.Worker',handle_call,3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,84}]},
                       {gen_server,try_handle_call,4,
                           [{file,"gen_server.erl"},{line,629}]},
                       {gen_server,handle_msg,5,
                           [{file,"gen_server.erl"},{line,661}]},
                       {proc_lib,init_p_do_apply,3,
                           [{file,"proc_lib.erl"},{line,240}]}]},
                     {'Elixir.GenServer',call,
                         [{via,gproc,{n,l,{reduction_engine_worker,9}}},
                          {reduce_and_store,
                              {<<"julio">>,1,3},
                              #{'__struct__' => 'Elixir.Regex',
                                opts => <<>>,
                                re_pattern => {re_pattern,0,0,0,
                                    <<69,82,67,80,11,1,0,0,16,0,0,0,1,0,0,0,
                                      255,255,255,255,255,255,255,255,0,0,0,0,
                                      0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,
                                      0,0,0,0,0,0,0,0,0,125,0,207,25,107,255,
                                      255,255,255,255,255,255,255,255,255,255,
                                      255,223,253,255,255,255,255,255,255,255,
                                      255,255,255,255,255,255,255,255,255,255,
                                      255,107,255,255,255,255,255,255,255,255,
                                      255,255,255,255,223,253,255,255,255,255,
                                      255,255,255,255,255,255,255,255,255,255,
                                      255,255,255,255,29,101,107,255,255,255,
                                      255,255,255,255,255,255,255,255,255,223,
                                      253,255,255,255,255,255,255,255,255,255,
                                      255,255,255,255,255,255,255,255,255,107,
                                      255,255,255,255,255,255,255,255,255,255,
                                      255,255,223,253,255,255,255,255,255,255,
                                      255,255,255,255,255,255,255,255,255,255,
                                      255,255,29,105,107,255,255,255,255,255,
                                      255,255,255,255,255,255,255,223,253,255,
                                      255,255,255,255,255,255,255,255,255,255,
                                      255,255,255,255,255,255,255,107,255,255,
                                      255,255,255,255,255,255,255,255,255,255,
                                      223,253,255,255,255,255,255,255,255,255,
                                      255,255,255,255,255,255,255,255,255,255,
                                      27,114,0,207,0>>},
                                source => <<"^[^ei][^ei]e[^ei][^ei]i[^ei][^ei]$">>},
                              #{'__struct__' => 'Elixir.MapSet',
                                map => #{<<"e">> => true,<<"i">> => true}}},
                          5000]}}
      in function  gen_fsm:terminate/7 (gen_fsm.erl, line 626)
    ancestors: [hangman_player_supervisor,<0.136.0>,<0.106.0>,<0.102.0>,
                  <0.101.0>]
    messages: []
    links: [<0.267.0>,<0.3596.1>,<0.137.0>]
    dictionary: []
    trap_exit: false
    status: running
    heap_size: 6772
    stack_size: 27
    reductions: 6788
  neighbours:
    neighbour: [{pid,<0.3596.1>},
                  {registered_name,[]},
                  {initial_call,
                      {'Elixir.Player.Async.Echo',init,['Argument__1']}},
                  {current_function,{gen_fsm,loop,7}},
                  {ancestors,
                      [<0.3594.1>,hangman_player_supervisor,<0.136.0>,
                       <0.106.0>,<0.102.0>,<0.101.0>]},
                  {messages,[]},
                  {links,[<0.3594.1>]},
                  {dictionary,[]},
                  {trap_exit,false},
                  {status,waiting},
                  {heap_size,233},
                  {stack_size,10},
                  {reductions,17}]

11:50:45.171 [error] ** State machine #PID<0.3672.1> terminating 
** Last message in was {:"$gen_sync_event", {#PID<0.3582.1>, #Reference<0.0.1.53744>},
 :game_keep_guessing}
** When State == :intrigued_wall_e
**      Data  == {#Player<[name: "julio", type: :robot, round_no: 1, game_pid: #PID<0.267.0>,
  event_pid: #PID<0.3647.1>,
  round_data: [no: 1, guess: "e", guess_result: :correct_letter,
   round_code: :game_keep_guessing,
   round_status: "--E--I--; score=2; status=KEEP_GUESSING",
   pattern: "--E--I--"]]>, #PID<0.3673.1>}
** Reason for termination = 
** {{%HangmanError{message: "counter not found for key: {\"julio\", 1, 2}"},
  [{Pass.Cache, :get, 2, [file: 'lib/hangman/pass_cache.ex', line: 168]},
   {Reduction.Engine.Worker, :do_reduce_and_store, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 103]},
   {Reduction.Engine.Worker, :handle_call, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 84]},
   {:gen_server, :try_handle_call, 4, [file: 'gen_server.erl', line: 629]},
   {:gen_server, :handle_msg, 5, [file: 'gen_server.erl', line: 661]},
   {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 240]}]},
 {GenServer, :call,
  [{:via, :gproc, {:n, :l, {:reduction_engine_worker, 9}}},
   {:reduce_and_store, {"julio", 1, 2}, ~r/^[^e][^e]e[^e][^e]i[^e][^e]$/,
    #MapSet<["e"]>}, 5000]}}


=CRASH REPORT==== 15-Mar-2016::11:50:45 ===
  crasher:
    initial call: Elixir.Player.FSM:init/1
    pid: <0.3672.1>
    registered_name: []
    exception exit: {{#{'__exception__' => true,
                        '__struct__' => 'Elixir.HangmanError',
                        message => <<"counter not found for key: {\"julio\", 1, 2}">>},
                      [{'Elixir.Pass.Cache',get,2,
                           [{file,"lib/hangman/pass_cache.ex"},{line,168}]},
                       {'Elixir.Reduction.Engine.Worker',do_reduce_and_store,
                           3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,103}]},
                       {'Elixir.Reduction.Engine.Worker',handle_call,3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,84}]},
                       {gen_server,try_handle_call,4,
                           [{file,"gen_server.erl"},{line,629}]},
                       {gen_server,handle_msg,5,
                           [{file,"gen_server.erl"},{line,661}]},
                       {proc_lib,init_p_do_apply,3,
                           [{file,"proc_lib.erl"},{line,240}]}]},
                     {'Elixir.GenServer',call,
                         [{via,gproc,{n,l,{reduction_engine_worker,9}}},
                          {reduce_and_store,
                              {<<"julio">>,1,2},
                              #{'__struct__' => 'Elixir.Regex',
                                opts => <<>>,
                                re_pattern => {re_pattern,0,0,0,
                                    <<69,82,67,80,81,0,0,0,16,0,0,0,1,0,0,0,
                                      255,255,255,255,255,255,255,255,0,0,0,0,
                                      0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,
                                      0,0,0,0,0,0,0,0,0,125,0,21,25,31,101,31,
                                      101,29,101,31,101,31,101,29,105,31,101,
                                      31,101,27,114,0,21,0>>},
                                source => <<"^[^e][^e]e[^e][^e]i[^e][^e]$">>},
                              #{'__struct__' => 'Elixir.MapSet',
                                map => #{<<"e">> => true}}},
                          5000]}}
      in function  gen_fsm:terminate/7 (gen_fsm.erl, line 626)
    ancestors: [hangman_player_supervisor,<0.136.0>,<0.106.0>,<0.102.0>,
                  <0.101.0>]
    messages: []
    links: [<0.267.0>,<0.3673.1>,<0.137.0>]
    dictionary: []
    trap_exit: false
    status: running
    heap_size: 4185
    stack_size: 27
    reductions: 6016
  neighbours:
    neighbour: [{pid,<0.3673.1>},
                  {registered_name,[]},
                  {initial_call,
                      {'Elixir.Player.Async.Echo',init,['Argument__1']}},
                  {current_function,{gen_fsm,loop,7}},
                  {ancestors,
                      [<0.3672.1>,hangman_player_supervisor,<0.136.0>,
                       <0.106.0>,<0.102.0>,<0.101.0>]},
                  {messages,[]},
                  {links,[<0.3672.1>]},
                  {dictionary,[]},
                  {trap_exit,false},
                  {status,waiting},
                  {heap_size,233},
                  {stack_size,10},
                  {reductions,17}]

=CRASH REPORT==== 15-Mar-2016::11:50:45 ===
  crasher:
    initial call: Elixir.Player.FSM:init/1
    pid: <0.3590.1>
    registered_name: []
    exception exit: {{#{'__exception__' => true,
                        '__struct__' => 'Elixir.HangmanError',
                        message => <<"counter not found for key: {\"julio\", 1, 2}">>},
                      [{'Elixir.Pass.Cache',get,2,
                           [{file,"lib/hangman/pass_cache.ex"},{line,168}]},
                       {'Elixir.Reduction.Engine.Worker',do_reduce_and_store,
                           3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,103}]},
                       {'Elixir.Reduction.Engine.Worker',handle_call,3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,84}]},
                       {gen_server,try_handle_call,4,
                           [{file,"gen_server.erl"},{line,629}]},
                       {gen_server,handle_msg,5,
                           [{file,"gen_server.erl"},{line,661}]},
                       {proc_lib,init_p_do_apply,3,
                           [{file,"proc_lib.erl"},{line,240}]}]},
                     {'Elixir.GenServer',call,
                         [{via,gproc,{n,l,{reduction_engine_worker,9}}},
                          {reduce_and_store,
                              {<<"julio">>,1,3},
                              #{'__struct__' => 'Elixir.Regex',
                                opts => <<>>,
                                re_pattern => {re_pattern,0,0,0,
                                    <<69,82,67,80,11,1,0,0,16,0,0,0,1,0,0,0,
                                      255,255,255,255,255,255,255,255,0,0,0,0,
                                      0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,
                                      0,0,0,0,0,0,0,0,0,125,0,207,25,107,255,
                                      255,255,255,255,255,255,255,255,255,255,
                                      255,223,253,255,255,255,255,255,255,255,
                                      255,255,255,255,255,255,255,255,255,255,
                                      255,107,255,255,255,255,255,255,255,255,
                                      255,255,255,255,223,253,255,255,255,255,
                                      255,255,255,255,255,255,255,255,255,255,
                                      255,255,255,255,29,101,107,255,255,255,
                                      255,255,255,255,255,255,255,255,255,223,
                                      253,255,255,255,255,255,255,255,255,255,
                                      255,255,255,255,255,255,255,255,255,107,
                                      255,255,255,255,255,255,255,255,255,255,
                                      255,255,223,253,255,255,255,255,255,255,
                                      255,255,255,255,255,255,255,255,255,255,
                                      255,255,29,105,107,255,255,255,255,255,
                                      255,255,255,255,255,255,255,223,253,255,
                                      255,255,255,255,255,255,255,255,255,255,
                                      255,255,255,255,255,255,255,107,255,255,
                                      255,255,255,255,255,255,255,255,255,255,
                                      223,253,255,255,255,255,255,255,255,255,
                                      255,255,255,255,255,255,255,255,255,255,
                                      27,114,0,207,0>>},
                                source => <<"^[^ei][^ei]e[^ei][^ei]i[^ei][^ei]$">>},
                              #{'__struct__' => 'Elixir.MapSet',
                                map => #{<<"e">> => true,<<"i">> => true}}},
                          5000]}}
      in function  gen_fsm:terminate/7 (gen_fsm.erl, line 626)
    ancestors: [hangman_player_supervisor,<0.136.0>,<0.106.0>,<0.102.0>,
                  <0.101.0>]
    messages: []
    links: [<0.267.0>,<0.3592.1>,<0.137.0>]
    dictionary: []
    trap_exit: false
    status: running
    heap_size: 6772
    stack_size: 27
    reductions: 6788
  neighbours:
    neighbour: [{pid,<0.3592.1>},
                  {registered_name,[]},
                  {initial_call,
                      {'Elixir.Player.Async.Echo',init,['Argument__1']}},
                  {current_function,{gen_fsm,loop,7}},
                  {ancestors,
                      [<0.3590.1>,hangman_player_supervisor,<0.136.0>,
                       <0.106.0>,<0.102.0>,<0.101.0>]},
                  {messages,[]},
                  {links,[<0.3590.1>]},
                  {dictionary,[]},
                  {trap_exit,false},
                  {status,waiting},
                  {heap_size,233},
                  {stack_size,10},
                  {reductions,17}]

11:50:45.315 [error] ** State machine #PID<0.3666.1> terminating 
** Last message in was {:"$gen_sync_event", {#PID<0.3579.1>, #Reference<0.0.1.53727>},
 :game_keep_guessing}
** When State == :intrigued_wall_e
**      Data  == {#Player<[name: "julio", type: :robot, round_no: 1, game_pid: #PID<0.267.0>,
  event_pid: #PID<0.3641.1>,
  round_data: [no: 1, guess: "e", guess_result: :correct_letter,
   round_code: :game_keep_guessing,
   round_status: "--E--I--; score=2; status=KEEP_GUESSING",
   pattern: "--E--I--"]]>, #PID<0.3667.1>}
** Reason for termination = 
** {{%HangmanError{message: "counter not found for key: {\"julio\", 1, 2}"},
  [{Pass.Cache, :get, 2, [file: 'lib/hangman/pass_cache.ex', line: 168]},
   {Reduction.Engine.Worker, :do_reduce_and_store, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 103]},
   {Reduction.Engine.Worker, :handle_call, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 84]},
   {:gen_server, :try_handle_call, 4, [file: 'gen_server.erl', line: 629]},
   {:gen_server, :handle_msg, 5, [file: 'gen_server.erl', line: 661]},
   {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 240]}]},
 {GenServer, :call,
  [{:via, :gproc, {:n, :l, {:reduction_engine_worker, 9}}},
   {:reduce_and_store, {"julio", 1, 2}, ~r/^[^e][^e]e[^e][^e]i[^e][^e]$/,
    #MapSet<["e"]>}, 5000]}}


=CRASH REPORT==== 15-Mar-2016::11:50:45 ===
  crasher:
    initial call: Elixir.Player.FSM:init/1
    pid: <0.3666.1>
    registered_name: []
    exception exit: {{#{'__exception__' => true,
                        '__struct__' => 'Elixir.HangmanError',
                        message => <<"counter not found for key: {\"julio\", 1, 2}">>},
                      [{'Elixir.Pass.Cache',get,2,
                           [{file,"lib/hangman/pass_cache.ex"},{line,168}]},
                       {'Elixir.Reduction.Engine.Worker',do_reduce_and_store,
                           3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,103}]},
                       {'Elixir.Reduction.Engine.Worker',handle_call,3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,84}]},
                       {gen_server,try_handle_call,4,
                           [{file,"gen_server.erl"},{line,629}]},
                       {gen_server,handle_msg,5,
                           [{file,"gen_server.erl"},{line,661}]},
                       {proc_lib,init_p_do_apply,3,
                           [{file,"proc_lib.erl"},{line,240}]}]},
                     {'Elixir.GenServer',call,
                         [{via,gproc,{n,l,{reduction_engine_worker,9}}},
                          {reduce_and_store,
                              {<<"julio">>,1,2},
                              #{'__struct__' => 'Elixir.Regex',
                                opts => <<>>,
                                re_pattern => {re_pattern,0,0,0,
                                    <<69,82,67,80,81,0,0,0,16,0,0,0,1,0,0,0,
                                      255,255,255,255,255,255,255,255,0,0,0,0,
                                      0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,
                                      0,0,0,0,0,0,0,0,0,125,0,21,25,31,101,31,
                                      101,29,101,31,101,31,101,29,105,31,101,
                                      31,101,27,114,0,21,0>>},
                                source => <<"^[^e][^e]e[^e][^e]i[^e][^e]$">>},
                              #{'__struct__' => 'Elixir.MapSet',
                                map => #{<<"e">> => true}}},
                          5000]}}
      in function  gen_fsm:terminate/7 (gen_fsm.erl, line 626)
    ancestors: [hangman_player_supervisor,<0.136.0>,<0.106.0>,<0.102.0>,
                  <0.101.0>]
    messages: []
    links: [<0.267.0>,<0.3667.1>,<0.137.0>]
    dictionary: []
    trap_exit: false
    status: running
    heap_size: 6772
    stack_size: 27
    reductions: 5996
  neighbours:
    neighbour: [{pid,<0.3667.1>},
                  {registered_name,[]},
                  {initial_call,
                      {'Elixir.Player.Async.Echo',init,['Argument__1']}},
                  {current_function,{gen_fsm,loop,7}},
                  {ancestors,
                      [<0.3666.1>,hangman_player_supervisor,<0.136.0>,
                       <0.106.0>,<0.102.0>,<0.101.0>]},
                  {messages,[]},
                  {links,[<0.3666.1>]},
                  {dictionary,[]},
                  {trap_exit,false},
                  {status,waiting},
                  {heap_size,233},
                  {stack_size,10},
                  {reductions,17}]

=CRASH REPORT==== 15-Mar-2016::11:50:45 ===
  crasher:
    initial call: Elixir.Player.FSM:init/1
    pid: <0.3601.1>
    registered_name: []
    exception exit: {{#{'__exception__' => true,
                        '__struct__' => 'Elixir.HangmanError',
                        message => <<"counter not found for key: {\"julio\", 1, 2}">>},
                      [{'Elixir.Pass.Cache',get,2,
                           [{file,"lib/hangman/pass_cache.ex"},{line,168}]},
                       {'Elixir.Reduction.Engine.Worker',do_reduce_and_store,
                           3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,103}]},
                       {'Elixir.Reduction.Engine.Worker',handle_call,3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,84}]},
                       {gen_server,try_handle_call,4,
                           [{file,"gen_server.erl"},{line,629}]},
                       {gen_server,handle_msg,5,
                           [{file,"gen_server.erl"},{line,661}]},
                       {proc_lib,init_p_do_apply,3,
                           [{file,"proc_lib.erl"},{line,240}]}]},
                     {'Elixir.GenServer',call,
                         [{via,gproc,{n,l,{reduction_engine_worker,9}}},
                          {reduce_and_store,
                              {<<"julio">>,1,2},
                              #{'__struct__' => 'Elixir.Regex',
                                opts => <<>>,
                                re_pattern => {re_pattern,0,0,0,
                                    <<69,82,67,80,81,0,0,0,16,0,0,0,1,0,0,0,
                                      255,255,255,255,255,255,255,255,0,0,0,0,
                                      0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,
                                      0,0,0,0,0,0,0,0,0,125,0,21,25,31,101,31,
                                      101,29,101,31,101,31,101,31,101,31,101,
                                      31,101,27,114,0,21,0>>},
                                source => <<"^[^e][^e]e[^e][^e][^e][^e][^e]$">>},
                              #{'__struct__' => 'Elixir.MapSet',
                                map => #{<<"e">> => true}}},
                          5000]}}
      in function  gen_fsm:terminate/7 (gen_fsm.erl, line 626)
    ancestors: [hangman_player_supervisor,<0.136.0>,<0.106.0>,<0.102.0>,
                  <0.101.0>]
    messages: []
    links: [<0.267.0>,<0.3602.1>,<0.137.0>]
    dictionary: []
    trap_exit: false
    status: running
    heap_size: 6772
    stack_size: 27
    reductions: 5744
  neighbours:
    neighbour: [{pid,<0.3602.1>},
                  {registered_name,[]},
                  {initial_call,
                      {'Elixir.Player.Async.Echo',init,['Argument__1']}},
                  {current_function,{gen_fsm,loop,7}},
                  {ancestors,
                      [<0.3601.1>,hangman_player_supervisor,<0.136.0>,
                       <0.106.0>,<0.102.0>,<0.101.0>]},
                  {messages,[]},
                  {links,[<0.3601.1>]},
                  {dictionary,[]},
                  {trap_exit,false},
                  {status,waiting},
                  {heap_size,233},
                  {stack_size,10},
                  {reductions,17}]

11:50:45.404 [error] ** State machine #PID<0.3648.1> terminating 
** Last message in was {:"$gen_sync_event", {#PID<0.3570.1>, #Reference<0.0.1.53622>},
 :game_keep_guessing}
** When State == :intrigued_wall_e
**      Data  == {#Player<[name: "julio", type: :robot, round_no: 1, game_pid: #PID<0.267.0>,
  event_pid: #PID<0.3621.1>,
  round_data: [no: 1, guess: "e", guess_result: :correct_letter,
   round_code: :game_keep_guessing,
   round_status: "--E--I--; score=2; status=KEEP_GUESSING",
   pattern: "--E--I--"]]>, #PID<0.3649.1>}
** Reason for termination = 
** {{%HangmanError{message: "counter not found for key: {\"julio\", 1, 2}"},
  [{Pass.Cache, :get, 2, [file: 'lib/hangman/pass_cache.ex', line: 168]},
   {Reduction.Engine.Worker, :do_reduce_and_store, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 103]},
   {Reduction.Engine.Worker, :handle_call, 3,
    [file: 'lib/hangman/reduction_engine_worker.ex', line: 84]},
   {:gen_server, :try_handle_call, 4, [file: 'gen_server.erl', line: 629]},
   {:gen_server, :handle_msg, 5, [file: 'gen_server.erl', line: 661]},
   {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 240]}]},
 {GenServer, :call,
  [{:via, :gproc, {:n, :l, {:reduction_engine_worker, 9}}},
   {:reduce_and_store, {"julio", 1, 2}, ~r/^[^e][^e]e[^e][^e]i[^e][^e]$/,
    #MapSet<["e"]>}, 5000]}}


=CRASH REPORT==== 15-Mar-2016::11:50:45 ===
  crasher:
    initial call: Elixir.Player.FSM:init/1
    pid: <0.3648.1>
    registered_name: []
    exception exit: {{#{'__exception__' => true,
                        '__struct__' => 'Elixir.HangmanError',
                        message => <<"counter not found for key: {\"julio\", 1, 2}">>},
                      [{'Elixir.Pass.Cache',get,2,
                           [{file,"lib/hangman/pass_cache.ex"},{line,168}]},
                       {'Elixir.Reduction.Engine.Worker',do_reduce_and_store,
                           3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,103}]},
                       {'Elixir.Reduction.Engine.Worker',handle_call,3,
                           [{file,"lib/hangman/reduction_engine_worker.ex"},
                            {line,84}]},
                       {gen_server,try_handle_call,4,
                           [{file,"gen_server.erl"},{line,629}]},
                       {gen_server,handle_msg,5,
                           [{file,"gen_server.erl"},{line,661}]},
                       {proc_lib,init_p_do_apply,3,
                           [{file,"proc_lib.erl"},{line,240}]}]},
                     {'Elixir.GenServer',call,
                         [{via,gproc,{n,l,{reduction_engine_worker,9}}},
                          {reduce_and_store,
                              {<<"julio">>,1,2},
                              #{'__struct__' => 'Elixir.Regex',
                                opts => <<>>,
                                re_pattern => {re_pattern,0,0,0,
                                    <<69,82,67,80,81,0,0,0,16,0,0,0,1,0,0,0,
                                      255,255,255,255,255,255,255,255,0,0,0,0,
                                      0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,
                                      0,0,0,0,0,0,0,0,0,125,0,21,25,31,101,31,
                                      101,29,101,31,101,31,101,29,105,31,101,
                                      31,101,27,114,0,21,0>>},
                                source => <<"^[^e][^e]e[^e][^e]i[^e][^e]$">>},
                              #{'__struct__' => 'Elixir.MapSet',
                                map => #{<<"e">> => true}}},
                          5000]}}
      in function  gen_fsm:terminate/7 (gen_fsm.erl, line 626)
    ancestors: [hangman_player_supervisor,<0.136.0>,<0.106.0>,<0.102.0>,
                  <0.101.0>]
    messages: []
    links: [<0.267.0>,<0.3649.1>,<0.137.0>]
    dictionary: []
    trap_exit: false
    status: running
    heap_size: 6772
    stack_size: 27
    reductions: 6008
  neighbours:
    neighbour: [{pid,<0.3649.1>},
                  {registered_name,[]},
                  {initial_call,
                      {'Elixir.Player.Async.Echo',init,['Argument__1']}},
                  {current_function,{gen_fsm,loop,7}},
                  {ancestors,
                      [<0.3648.1>,hangman_player_supervisor,<0.136.0>,
                       <0.106.0>,<0.102.0>,<0.101.0>]},
                  {messages,[]}